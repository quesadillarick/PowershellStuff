$ip    = '212.13.14.15/25'  # <-- works with or without a CIDR
$octet = '([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])'
$rcidr = '([0-2]?[0-9]|3[0-2])'
$regex = "^$octet\.$octet\.$octet\.$octet(\/$rcidr)?$"
$find  = [regex]::Match($ip,$regex)
$cidr  = $find.Groups[5].Value.Replace('/',$null) -as [int]
$sub64 = ([convert]::ToInt64(('1'*$cidr+'0'*(32-$cidr)),2))
$parts = @(
    ([math]::Truncate($sub64  / 16777216))
    ([math]::Truncate(($sub64 % 16777216) / 65536))
    ([math]::Truncate(($sub64 % 65536) / 256))
    ([math]::Truncate($sub64  % 256))
)
$subnet = $parts -join '.'
$revers = $find.Groups[4..1].Value -join '.'
$IpObj  = [pscustomobject] @{
    PSTypeName = 'Custom.IPAddress.Object'
    IpStr  = $ip
    IP     = [ipaddress]$ip.Split('/')[0]
    Octet1 = [int]$find.Groups[1].Value
    Octet2 = [int]$find.Groups[2].Value
    Octet3 = [int]$find.Groups[3].Value
    Octet4 = [int]$find.Groups[4].Value
    Cidr   = $cidr
    Subnet = [ipaddress]$subnet
    Reverse= [ipaddress]$revers
}
Write-Output $IpObj
